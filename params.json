{
  "name": "dbmigrations",
  "tagline": "A utility for managing database migration scripts",
  "body": "[![Build status](https://ci.appveyor.com/api/projects/status/9y7tm6ujwg6d05kv?svg=true)](https://ci.appveyor.com/project/jhgbrt/dbmigrations)\r\n\r\n# DbMigrations\r\n\r\nUse this utility to execute DDL and SQL scripts against a database\r\n\r\n##How it works\r\n\r\nThe tool is a command-line utility that you point at a folder containing\r\nsql scripts, which (by convention) need to be organized in a certain way.\r\nHere's a small example to get a feel of it:\r\n\r\n    migrate.exe --directory=path/to/scripts --server=.\\sqlexpress --database=MyDb\r\n\r\nThis command runs all migration scripts in the folder pointed to against a\r\nSQL Express database, using integrated security. \r\n\r\n##Organizing the scripts\r\n\r\nBy default, first all scripts in a folder called 'Migrations'\r\nwill be executed (in strict alphabetical order). Scripts may be\r\norganized in subfolders, in which case the folders will also be\r\ntreated in alphabetical order. However, once a migration script\r\nhas been performed from a 'newer' folder, it is not allowed to\r\nadd new migrations in an 'earlier' folder.\r\n\r\n##Tracking the migrations\r\nMigrations are tracked inside the database, in a table called 'Migrations'.\r\nOnce a migration has been performed, it can not be changed. Also, new\r\nversions of a migration package should always include all previous\r\nmigrations, with the same name in the same order.\r\n\r\nThe Migrations table has the following layout (note that the exact data type\r\ndepends on the database on which the migrations are run):\r\n\r\n    ScriptName (string): the name of the script (relative to the Migrations folder)\r\n    Checksum   (string): a MD5 hash of the script content\r\n    Content    (string): the full content of the script\r\n    ExecutedOn (date)  : the (local) date/time when this script was executed\r\n\r\n##Additional (idempotent) scripts\r\nFor added convenience, the tool also supports running additional sql\r\nscripts, in addition to the migration scripts themselfves.\r\n\r\n\r\nAfter the migrations have been run, by default *all* scripts in *all* other\r\nsubfolders are executed. These scripts can be data loads, updates of\r\nviews or stored procedures, etc. The only limitation is that these\r\nscripts should be **idempotent** at all times, and consistent with the\r\ncurrent state of the database as it is represented by the set of\r\nmigrations.\r\n\r\nIt is possible fine-tune this behaviour and have a pre-migration phase as well, using the\r\n-pre and -post switches, where you specify a comma-seperated list of folders that must\r\nbe executed before resp. after the migrations. It is *highly* recommended to only\r\ninclude 'generic', idem-potent scripts in the pre-migration phase, otherwise this folder\r\nwill very quickly become a source of severe headaches.\r\n\r\n##Example\r\n\r\nGiven this folder structure:\r\n\r\n    Scripts\r\n    ├───01_DataLoads\r\n    |   ├───01_Phase1\r\n    |   |   ├───001_referencedata1.sql\r\n    |   |   └───002_samples.sql\r\n    |   └───02_Phase2\r\n    |       └───001_referencedata2.sql\r\n    ├───02_ViewsAndSprocs\r\n    |   ├───001_views.sql\r\n    |   └───002_sprocs.sql\r\n    └───Migrations\r\n        ├───001_migration1.sql\r\n        └───002_migration2.sql\r\n\r\nThe scripts in this structure will be run in this order:\r\n\r\n    Scripts\\Migrations\\001_migration1.sql\r\n    Scripts\\Migrations\\002_migration2.sql\r\n    Scripts\\01_DataLoads\\01_Phase1\\001_referencedata1.sql\r\n    Scripts\\01_DataLoads\\01_Phase1\\002_samples.sql\r\n    Scripts\\01_DataLoads\\02_Phase2\\002_referencedata2.sql\r\n    Scripts\\02_ViewsAndSprocs\\001_views.sql\r\n    Scripts\\02_ViewsAndSprocs\\002_sprocs.sql\r\n\r\n##Command line options\r\n\r\n      --server=VALUE         \r\nThe db server. For SQL Server, this is a string\r\n                               of the form 'servername\\instance' (e.g.\r\n                               localhost\\sqlexpress), or just 'servername' in\r\n                               case there's just a default instance). For\r\n                               Oracle, you can use either a registered TNS\r\n                               name, or (using the EZCONNECT feature), use a\r\n                               string of the form 'server[:port[/service]]', e.\r\n                               g. 'localhost:1521/XE'\r\n\r\n      --user=VALUE           \r\nThe database username (when no user/password specified,\r\n                               integrated security is assumed)\r\n\r\n      --password=VALUE       \r\n\r\nThe database password (when no user/password specified,\r\n                               integrated security is assumed)\r\n\r\n      --database=VALUE       \r\n\r\nThe database name (initial catalog)\r\n\r\n      --directory=VALUE      \r\n\r\nAbsolute or relative path to folder containing the migration scripts\r\n\r\n      --whatif               \r\n\r\nDo not actually run the scripts, just report what\r\n                               would be executed).\r\n\r\n      --help                 \r\n\r\nPrint help\r\n\r\n      --connectionString=VALUE\r\nThe complete connection string\r\n\r\n      --providerName=VALUE   \r\nThe database provider invariant name. The default\r\n                               is System.Data.SqlClient). For other provider\r\n                               names, the corresponding .dll containing the\r\n                               provider implementation must be deployed\r\n                               alongside the migration utility (e.g., for\r\n                               Oracle: Oracle.ManagedDataAccess.Client.dll).\r\n\r\n      --schema=VALUE         \r\n\r\nDb schema for Migrations table (if different from the default for this user). \r\nFor Sql server, the default schema is \"dbo\". For Oracle, the default schema \r\nis the same as the user name.\r\n\r\n      --reinitialize         \r\nWill clear the database and re-run all migrations.\r\n                                Unless --force is specified, this is only\r\n                               allowed for local databases. Use with care!\r\n\r\n      --force                \r\nWhen used with --reinitialize, allows to restage\r\n                               a remote db. Use with care!\r\n\r\n##Additional examples\r\n\r\n    migrate.exe --directory=path/to/scripts --reinitialize \\\r\n                --server=localhost:1521/XE --user=(user) --password=(pass) \\\r\n                --schema=MYSCHEMA\r\n                --providerName=Oracle.ManagedDataAccess.Client \r\n\r\nDrops all user objects and re-runs the migrations in the given folder against the \r\nschema MYSCHEMA of a locally installed Oracle XE instance. The user must exist, and \r\nhave been granted sufficient rights in that schema.\r\n\r\n    migrate.exe --directory=path/to/scripts --server=mydbserver --database=MyDb\r\n\r\n(Incrementally) runs all migrations in the given directory against the default \r\ninstance running on server mydbserver. Integrated Security is used, so the user \r\nunder which the command is run should have sufficient rights. \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}